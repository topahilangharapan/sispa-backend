name: Hostinger CI/CD Pipeline

on:
  workflow_dispatch: # Manual trigger

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK
        uses: actions/setup-java@v2
        with:
          java-version: '21'
          distribution: ''

      - name: Compile project to .jar
        run: |
          ./gradlew clean assemble

      - name: Archive JAR
        uses: actions/upload-artifact@v2
        with:
          name: backend-jar
          path: build/libs/backend-0.0.1-SNAPSHOT.jar

  publish:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Login to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.IMAGE_NAME }}:${{ secrets.IMAGE_TAG }} -f Dockerfile .

      - name: Push image to registry
        run: |
          docker push ${{ secrets.IMAGE_NAME }}:${{ secrets.IMAGE_TAG }}

  deploy:
    runs-on: ubuntu-latest
    needs: publish
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.DEPLOY_PRIVATE_KEY }}" | tr -d '\r' | ssh-add -
          chmod 700 ~/.ssh
          echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config

      - name: Deploy to Hostinger VPS
        run: |
          ssh "${{ secrets.DEPLOY_USERNAME }}@${{ secrets.DEPLOY_SERVER }}" "mkdir -p ~/backend/"
          rsync -rahv docker-compose.yml "${{ secrets.DEPLOY_USERNAME }}@${{ secrets.DEPLOY_SERVER }}:~/backend/"
          ssh "${{ secrets.DEPLOY_USERNAME }}@${{ secrets.DEPLOY_SERVER }}" "
            export IMAGE_NAME=${{ secrets.IMAGE_NAME }} &&
            export DATABASE_URL_DEV=${{ secrets.DATABASE_URL_DEV }} &&
            export DATABASE_USERNAME_DEV=${{ secrets.DATABASE_USERNAME_DEV }} &&
            export DATABASE_PASSWORD_DEV=${{ secrets.DATABASE_PASSWORD_DEV }} &&
            export JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }} &&
            cd /root/$CI_PROJECT_DIR &&
            docker compose -f docker-compose-deploy.yml up -d --pull always
          "

  clean:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.DEPLOY_PRIVATE_KEY }}" | tr -d '\r' | ssh-add -
          chmod 700 ~/.ssh
          echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config

      - name: Clean up old Docker images
        run: |
          ssh "${{ secrets.DEPLOY_USERNAME }}@${{ secrets.DEPLOY_SERVER }}" "docker system prune -f"