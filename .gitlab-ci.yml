default:
  tags:
    - hostinger

.setup-ssh:
  before_script:
    - "which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )"
    - eval $(ssh-agent -s)
    - echo "$DEPLOY_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config

stages:
  - build
  - publish
  - deploy
  - clean

variables:
  IMAGE_NAME: registry.gitlab.com/musthofa.joko/b01-radiant-be
  IMAGE_TAG: latest

build:
  before_script:
    - echo "Checking permissions..."
    - whoami
    - ls -lah $CI_PROJECT_DIR
  image: gradle:8.11.1-jdk21-alpine
  stage: build
  only:
    - deployment
  script:
    - echo "Compile project to .jar"
    - cd $CI_PROJECT_DIR
    - sh gradlew clean assemble
  artifacts:
    paths:
      - build/libs/*.jar

publish:
  image: docker:27.3.1-alpine3.20
  stage: publish
  dependencies:
    - build
  only:
    - deployment
  script:
    - echo "Build Docker image..."
    - cd $CI_PROJECT_DIR
    - docker build -t $IMAGE_NAME:$IMAGE_TAG -f Dockerfile .
    - echo "Push image to registry..."
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin
    - docker push $IMAGE_NAME:$IMAGE_TAG

deploy:
  stage: deploy
  dependencies:
    - publish
  only:
    - deployment
  extends: .setup-ssh
  script:
    - echo "Deploying to Hostinger VPS..."
    - ssh "${DEPLOY_USERNAME}@${DEPLOY_SERVER}" "docker login -u $CI_REGISTRY_USER --password-stdin <<< '$CI_REGISTRY_PASSWORD'"
    - ssh "${DEPLOY_USERNAME}@${DEPLOY_SERVER}" "mkdir -p ~/backend/"
    - rsync -rahv $CI_PROJECT_DIR/docker-compose.yml "${DEPLOY_USERNAME}@${DEPLOY_SERVER}:~/backend/"
    - ssh "${DEPLOY_USERNAME}@${DEPLOY_SERVER}" "
      export IMAGE_NAME=${IMAGE_NAME} &&
      export DATABASE_URL_DEV=${DATABASE_URL_DEV} &&
      export DATABASE_USERNAME_DEV=${DATABASE_USERNAME_DEV} &&
      export DATABASE_PASSWORD_DEV=${DATABASE_PASSWORD_DEV} &&
      export JWT_SECRET_KEY=${JWT_SECRET_KEY} &&
      cd ~/backend/ &&
      docker compose -f docker-compose-deploy.yml up -d --pull always
      "

cleaning:
  stage: clean
  dependencies:
    - deploy
  only:
    - deployment
  extends: .setup-ssh
  script:
    - echo "Cleaning up old Docker images..."
    - ssh "${DEPLOY_USERNAME}@${DEPLOY_SERVER}" "docker system prune -f"
